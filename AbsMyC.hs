

module AbsMyC where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = Prog [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = SVarDef Dec
    | SFunDef Dec [Dec] Stmt
    | SWhile Exp Stmt
    | SIf Exp Stmt
    | SPrint Exp
    | SBlock [Stmt]
    | SExpStmt Exp
    | SAss Id Exp
    | SReturn Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EILit Integer
    | ETrue
    | EFalse
    | EVar Id
    | EApp Id [Exp]
    | EIncr Exp
    | EDecr Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ELT Exp Exp
    | ELEq Exp Exp
    | EGT Exp Exp
    | EGEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
  deriving (Eq, Ord, Show, Read)

data Type = Tbool | Tint | Tvoid
  deriving (Eq, Ord, Show, Read)

data Dec = Decl Type Id
  deriving (Eq, Ord, Show, Read)

