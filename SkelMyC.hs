module SkelMyC where

-- Haskell module generated by the BNF converter

import AbsMyC
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog stmts -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  SVarDef dec -> failure x
  SFunDef dec decs stmt -> failure x
  SWhile exp stmt -> failure x
  SIf exp stmt -> failure x
  SPrint exp -> failure x
  SBlock stmts -> failure x
  SExpStmt exp -> failure x
  SAss id exp -> failure x
  SReturn exp -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EILit integer -> failure x
  ETrue -> failure x
  EFalse -> failure x
  EVar id -> failure x
  EApp id exps -> failure x
  EIncr exp -> failure x
  EDecr exp -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EPlus exp1 exp2 -> failure x
  EMinus exp1 exp2 -> failure x
  ELT exp1 exp2 -> failure x
  ELEq exp1 exp2 -> failure x
  EGT exp1 exp2 -> failure x
  EGEq exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENEq exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
transType :: Type -> Result
transType x = case x of
  Tbool -> failure x
  Tint -> failure x
  Tvoid -> failure x
transDec :: Dec -> Result
transDec x = case x of
  Decl type_ id -> failure x

